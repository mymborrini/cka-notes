ETCD in K8s

The Etcd database stores informations regariding Nodes, PODs, Configs, Secrets, Accounts, Roles, Bindings, Others 

ONLY ONCE a change is uptated in the etcd database, then the change is considered to be COMPLETE.

Depending on how you setup your cluster etcd is deployed differently. 
You can set up your k8s cluster from scratch or you can use the kubeadm tool.

=> If you setup the k8s cluster from scratch (manual), then you have to download the etcd yourself. 

$ wget -q --https-only https://github.com/ceros/etcd/release/download....

etcd.service
ExecStart=/usr/local/bin/etcd \
  ....
  --adverise-client-urls https://${INTERNAL_IP}:2379 \
  ...

adverise-client-urls is important because it allows k8s to reach out its database. 

=> If you set it up using kubeadm etcd will set up automatically in the kube-system namespace

$ kubectl get pods -n kube-system
Name            READY           STATUS
etcd-master     1/1             Running

To see all the keys stored by kubernetes 

$ kubectl exec etcd-master -n kube-system etcdctl get / --prefix -keys-only
/registry/apiregistration.k8s.io/apiservices/v1.
/registry/apiregistration.k8s.io/apiservices/v1.apps
....



Now how k8s stores kyes?

k8s stores data in a specific directory structure 
The root directory is /registry and after that you have constructs like minions,nodes,pods,roles...


What happend in a a High Availiabilty (HA) environment, you will have mutliple master nodes in your cluster, so you have multiple etcdf instances
in your master nodes. In this case you have to be sure the etcds know each others

etcd.service
ExecStart=/usr/local/bin/etcd \
  ....
  --adverise-client-urls https://${INTERNAL_IP}:2379 \
  --initial-cluster controller-0=https://${CONTROLLER0_IP}:2380,contoller-1=https://${CONTROLLER1_IP}:2380
  ...


ETCD COMMANDS 

AS said before  ETCDCTL can interact with ETCD Server using 2 API versions - Version 2 and Version 3.  By default its set to use Version 2.
 Each version has different sets of commands.
For example ETCDCTL version 2 supports the following commands:

$ etcdctl backup
$ etcdctl cluster-health
$ etcdctl mk
$ etcdctl mkdir
$ etcdctl set

Whereas the commands are different in version 3

$ etcdctl snapshot save 
$ etcdctl endpoint health
$ etcdctl get
$ etcdctl put

To set the right version of API set the environment variable ETCDCTL_API command

$ export ETCDCTL_API=3
When API version is not set, it is assumed to be set to version 2. 
And version 3 commands listed above don't work.
When API version is set to version 3, version 2 commands listed above don't work.

Apart from that, you must also specify path to certificate files so that ETCDCTL can authenticate to the ETCD API Server. 
The certificate files are available in the etcd-master at the following path

--cacert /etc/kubernetes/pki/etcd/ca.crt     
--cert /etc/kubernetes/pki/etcd/server.crt     
--key /etc/kubernetes/pki/etcd/server.key

The final form of a command is something like this:

kubectl exec etcd-master -n kube-system -- sh -c \ 
    "ETCDCTL_API=3 etcdctl get / --prefix --keys-only --limit=10  \
    --cacert /etc/kubernetes/pki/etcd/ca.crt \
    --cert /etc/kubernetes/pki/etcd/server.crt  \
    --key /etc/kubernetes/pki/etcd/server.key" 

